Elm.Parser.parseToFile
    (String.trimLeft """
module Namespace.Beta exposing (..)

import Delta exposing (..)
import Dict
import Elm.Dependency exposing (Dependency(..), Version, epsilon)
import Gamma.Interface as Interface


type alias MaybeInt =
    Maybe Int


type alias RecordType =
    { alfa : Int }


type ChoiceType
    = Choice_Alfa
    | Choice_Beta Int


greet : String -> String
greet param_name =
    "Hello, " ++ param_name ++ " ðŸ‘‹"


type String
    = String (List Char.Char)
      -- We need another tag to prevent the compiler from assuming that the condition for tag 'String' is always true.
    | AnyOtherKind


{-| Replicates the given appendable.
-}
replicate : appendable -> appendable
replicate a =
    case a of
        String stringA ->
            String (Pine_kernel.concat [ stringA, stringA ])

        _ ->
            Pine_kernel.concat [ a, a ]


toIntFromList : List Char -> Maybe Int
toIntFromList stringAsList =
    case stringAsList of
        [] ->
            Nothing

        firstChar :: lessFirstChar ->
            let
                ( valueString, signMultiplier ) =
                    case firstChar of
                        '-' ->
                            ( lessFirstChar, -1 )

                        '+' ->
                            ( lessFirstChar, 1 )

                        _ ->
                            ( stringAsList, 1 )
            in
            if valueString == [] then
                Nothing

            else
                case toUnsignedIntFromList 0 valueString of
                    Just unsigned ->
                        Just (Pine_kernel.int_mul [ signMultiplier, unsigned ])

                    Nothing ->
                        Nothing


moveRedLeft : Dict k v -> Dict k v
moveRedLeft dict =
    case dict of
        RBNode_elm_builtin clr k v (RBNode_elm_builtin lClr lK lV lLeft lRight) (RBNode_elm_builtin rClr rK rV ((RBNode_elm_builtin Red rlK rlV rlL rlR) as rLeft) rRight) ->
            RBNode_elm_builtin
                Red
                rlK
                rlV
                (RBNode_elm_builtin Black k v (RBNode_elm_builtin Red lK lV lLeft lRight) rlL)
                (RBNode_elm_builtin Black rK rV rlR rRight)

        RBNode_elm_builtin clr k v (RBNode_elm_builtin lClr lK lV lLeft lRight) (RBNode_elm_builtin rClr rK rV rLeft rRight) ->
            case clr of
                Black ->
                    RBNode_elm_builtin
                        Black
                        k
                        v
                        (RBNode_elm_builtin Red lK lV lLeft lRight)
                        (RBNode_elm_builtin Red rK rV rLeft rRight)

                Red ->
                    RBNode_elm_builtin
                        Black
                        k
                        v
                        (RBNode_elm_builtin Red lK lV lLeft lRight)
                        (RBNode_elm_builtin Red rK rV rLeft rRight)

        _ ->
            dict


map3 : (a -> b -> c -> value) -> Decoder a -> Decoder b -> Decoder c -> Decoder value
map3 func (Decoder decodeA) (Decoder decodeB) (Decoder decodeC) =
    Decoder
        (\\bites offset ->
            let
                ( offsetA, a ) =
                    decodeA bites offset

                ( offsetB, b ) =
                    decodeB bites offsetA

                ( offsetC, c ) =
                    decodeC bites offsetB
            in
            ( offsetC, func a b c )
        )


type Boolean
    = MyTrue
    | MyFalse
    | MyOr Boolean Boolean


booleanParser : Parser.Parser Boolean
booleanParser =
    Parser.oneOf
        [ Parser.succeed MyTrue
            |. Parser.keyword "true"
        , Parser.succeed MyFalse
            |. Parser.keyword "false"
        , Parser.succeed MyOr
            |. Parser.symbol "("
            |. Parser.spaces
            |= Parser.lazy (\\_ -> boolean)
            |. Parser.spaces
            |. Parser.symbol "||"
            |. Parser.spaces
            |= Parser.lazy (\\_ -> boolean)
            |. Parser.spaces
            |. Parser.symbol ")"
        ]


mixedOperators_Alfa : Int -> Int -> Int -> Int -> Int
mixedOperators_Alfa a b c d =
    a + b * c - d


mixedOperators_Beta : Int -> Int -> Int -> Int -> Int
mixedOperators_Beta a b c d =
    a + b // c + d
""")
